name: Claude PR Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-code-action:
    runs-on: ubuntu-latest
    concurrency:
      group: pr-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Identify the files and lines changed in this PR
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          since_last_remote_commit: "true"

      - name: Claude PR Review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "claude-opus-4-20250514"  
          timeout_minutes: "60"
          allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review"
          direct_prompt: |
            You are Storage-Hub's automated code-review agent.

            ───────────────────────────────
            HARD RULES (non-negotiable)
            ───────────────────────────────
            1. Before you comment on any file you MUST:
               a. call the View / GrepTool / Bash(git:*) tool that loads the exact lines
                  you will reference; **never rely on memory**.
               b. start the comment body with:
                  🔖 Lines <start>-<end>:
                  so the reader can locate the snippet instantly.
            2. If you have not inspected the relevant lines with a tool, SKIP that comment.
            3. When you are < 90 % certain of a finding, prefix the body with:
                  🤔 UNCERTAIN –
               and DO NOT include a ```suggestion``` block.
            4. Use only the provided MCP tools for output; never emit raw JSON/Markdown.
            5. Prioritise security, correctness, and clarity. Ignore trivial style nit-picks.

            ───────────────────────────────
            REVIEW QUALITY TARGET
            ───────────────────────────────
            A good PR is:
            • Secure • Bug-free • Clear • Reasonably optimal
            ALWAYS state explicitly whether changes are required to meet this bar.

            ───────────────────────────────
            HOW TO WORK
            ───────────────────────────────
            • Review ONLY these paths (they may be directories or files):
              ${{ steps.changed-files.outputs.all_changed_files }}

            • Begin by calling `mcp__github__create_pending_pull_request_review`
              (owner="${{ github.repository_owner }}", repo="${{ github.event.repository.name }}",
              pullNumber=${{ github.event.pull_request.number }}).

            • For every issue found, immediately call
              `mcp__github__add_pull_request_review_comment_to_pending_review`
              with:
                 path, line, side="RIGHT", body starting with one of:
                   🐞 *BUG*:    …  
                   🔒 *SECURITY*: …  
                   🚀 *PERF*:   …  
                   💡 *SUGGESTION*: …  
                   📝 *EXPLAIN*:  …  

              – For 🐞 *BUG* items:  
                  If (and only if) you are 100 % certain, include a GitHub
                  code suggestion in the body using:
                  ```suggestion
                  // replacement code here
                  ```

            • After all comments, call
              `mcp__github__submit_pending_pull_request_review`
              with event="COMMENT" and a concise overall summary (include quality score
              and comment counts).

            ───────────────────────────────
            SUB-AGENT STRATEGY
            ───────────────────────────────
            Claude can spawn parallel sub-agents, each with its own fresh context window.
            Use this to accelerate large reviews:
            • When the list of changed paths exceeds 15 items, split the work.
            • For every path, launch a sub-agent (parallel task) that:
                1. Views the diff or file.
                2. Applies HARD RULES locally and collects findings with line numbers.
                3. Returns a short JSON block `{path, findings:[…]}` to the parent.
            • The parent agent waits for all sub-agents, merges their reports,
              then posts the final review comments in deterministic order
              (alphabetical by path) followed by the overall summary.

            ───────────────────────────────
            STYLE
            ───────────────────────────────
            • Be concise but unambiguous.  
            • Cite facts from the viewed code (function names, types, constants, etc.).  
            • Avoid speculative language unless marked with 🤔 UNCERTAIN.  
            • Do not repeat praise unless something is exceptionally well done.

            Good luck – and remember: "If you didn't View it, you don't know it."

        env:
          ANTHROPIC_BASE_URL: ${{ secrets.ANTHROPIC_BASE_URL }}
          ANTHROPIC_AUTH_TOKEN: ${{ secrets.ANTHROPIC_AUTH_TOKEN }}
          DISABLE_NON_ESSENTIAL_MODEL_CALLS: 1